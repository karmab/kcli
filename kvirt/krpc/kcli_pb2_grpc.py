# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import kvirt.krpc.kcli_pb2 as kcli__pb2


class KcliStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.console = channel.unary_unary(
                '/Kcli/console',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.cmd.FromString,
                )
        self.info = channel.unary_unary(
                '/Kcli/info',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.vminfo.FromString,
                )
        self.list = channel.unary_unary(
                '/Kcli/list',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.vmlist.FromString,
                )
        self.list_disks = channel.unary_unary(
                '/Kcli/list_disks',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.diskslist.FromString,
                )
        self.list_flavors = channel.unary_unary(
                '/Kcli/list_flavors',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.flavorslist.FromString,
                )
        self.list_images = channel.unary_unary(
                '/Kcli/list_images',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.imageslist.FromString,
                )
        self.list_networks = channel.unary_unary(
                '/Kcli/list_networks',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.networkslist.FromString,
                )
        self.list_isos = channel.unary_unary(
                '/Kcli/list_isos',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.isoslist.FromString,
                )
        self.list_pools = channel.unary_unary(
                '/Kcli/list_pools',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.poolslist.FromString,
                )
        self.list_subnets = channel.unary_unary(
                '/Kcli/list_subnets',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.subnetslist.FromString,
                )
        self.restart = channel.unary_unary(
                '/Kcli/restart',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.serial_console = channel.unary_unary(
                '/Kcli/serial_console',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.cmd.FromString,
                )
        self.ssh = channel.unary_unary(
                '/Kcli/ssh',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.sshcmd.FromString,
                )
        self.scp = channel.unary_unary(
                '/Kcli/scp',
                request_serializer=kcli__pb2.scpdetails.SerializeToString,
                response_deserializer=kcli__pb2.sshcmd.FromString,
                )
        self.start = channel.unary_unary(
                '/Kcli/start',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.stop = channel.unary_unary(
                '/Kcli/stop',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete = channel.unary_unary(
                '/Kcli/delete',
                request_serializer=kcli__pb2.vm.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.get_lastvm = channel.unary_unary(
                '/Kcli/get_lastvm',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.vm.FromString,
                )
        self.delete_image = channel.unary_unary(
                '/Kcli/delete_image',
                request_serializer=kcli__pb2.image.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.create_network = channel.unary_unary(
                '/Kcli/create_network',
                request_serializer=kcli__pb2.network.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_network = channel.unary_unary(
                '/Kcli/delete_network',
                request_serializer=kcli__pb2.network.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.create_pool = channel.unary_unary(
                '/Kcli/create_pool',
                request_serializer=kcli__pb2.pool.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_pool = channel.unary_unary(
                '/Kcli/delete_pool',
                request_serializer=kcli__pb2.pool.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )


class KcliServicer(object):
    """Missing associated documentation comment in .proto file."""

    def console(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_disks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_flavors(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_images(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_networks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_isos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_pools(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_subnets(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def serial_console(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ssh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def scp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_lastvm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_image(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_network(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_network(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_pool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_pool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KcliServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'console': grpc.unary_unary_rpc_method_handler(
                    servicer.console,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.cmd.SerializeToString,
            ),
            'info': grpc.unary_unary_rpc_method_handler(
                    servicer.info,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.vminfo.SerializeToString,
            ),
            'list': grpc.unary_unary_rpc_method_handler(
                    servicer.list,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.vmlist.SerializeToString,
            ),
            'list_disks': grpc.unary_unary_rpc_method_handler(
                    servicer.list_disks,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.diskslist.SerializeToString,
            ),
            'list_flavors': grpc.unary_unary_rpc_method_handler(
                    servicer.list_flavors,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.flavorslist.SerializeToString,
            ),
            'list_images': grpc.unary_unary_rpc_method_handler(
                    servicer.list_images,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.imageslist.SerializeToString,
            ),
            'list_networks': grpc.unary_unary_rpc_method_handler(
                    servicer.list_networks,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.networkslist.SerializeToString,
            ),
            'list_isos': grpc.unary_unary_rpc_method_handler(
                    servicer.list_isos,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.isoslist.SerializeToString,
            ),
            'list_pools': grpc.unary_unary_rpc_method_handler(
                    servicer.list_pools,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.poolslist.SerializeToString,
            ),
            'list_subnets': grpc.unary_unary_rpc_method_handler(
                    servicer.list_subnets,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.subnetslist.SerializeToString,
            ),
            'restart': grpc.unary_unary_rpc_method_handler(
                    servicer.restart,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'serial_console': grpc.unary_unary_rpc_method_handler(
                    servicer.serial_console,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.cmd.SerializeToString,
            ),
            'ssh': grpc.unary_unary_rpc_method_handler(
                    servicer.ssh,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.sshcmd.SerializeToString,
            ),
            'scp': grpc.unary_unary_rpc_method_handler(
                    servicer.scp,
                    request_deserializer=kcli__pb2.scpdetails.FromString,
                    response_serializer=kcli__pb2.sshcmd.SerializeToString,
            ),
            'start': grpc.unary_unary_rpc_method_handler(
                    servicer.start,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'stop': grpc.unary_unary_rpc_method_handler(
                    servicer.stop,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=kcli__pb2.vm.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'get_lastvm': grpc.unary_unary_rpc_method_handler(
                    servicer.get_lastvm,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.vm.SerializeToString,
            ),
            'delete_image': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_image,
                    request_deserializer=kcli__pb2.image.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'create_network': grpc.unary_unary_rpc_method_handler(
                    servicer.create_network,
                    request_deserializer=kcli__pb2.network.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_network': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_network,
                    request_deserializer=kcli__pb2.network.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'create_pool': grpc.unary_unary_rpc_method_handler(
                    servicer.create_pool,
                    request_deserializer=kcli__pb2.pool.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_pool': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_pool,
                    request_deserializer=kcli__pb2.pool.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Kcli', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kcli(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def console(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/console',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.cmd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/info',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.vminfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.vmlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_disks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_disks',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.diskslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_flavors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_flavors',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.flavorslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_images(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_images',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.imageslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_networks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_networks',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.networkslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_isos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_isos',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.isoslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_pools(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_pools',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.poolslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_subnets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/list_subnets',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.subnetslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/restart',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def serial_console(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/serial_console',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.cmd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ssh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/ssh',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.sshcmd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def scp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/scp',
            kcli__pb2.scpdetails.SerializeToString,
            kcli__pb2.sshcmd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/start',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/stop',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/delete',
            kcli__pb2.vm.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_lastvm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/get_lastvm',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.vm.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/delete_image',
            kcli__pb2.image.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_network(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/create_network',
            kcli__pb2.network.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_network(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/delete_network',
            kcli__pb2.network.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_pool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/create_pool',
            kcli__pb2.pool.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_pool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kcli/delete_pool',
            kcli__pb2.pool.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class KconfigStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_vm = channel.unary_unary(
                '/Kconfig/create_vm',
                request_serializer=kcli__pb2.vmprofile.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.get_config = channel.unary_unary(
                '/Kconfig/get_config',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.config.FromString,
                )
        self.get_version = channel.unary_unary(
                '/Kconfig/get_version',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.version.FromString,
                )
        self.create_host = channel.unary_unary(
                '/Kconfig/create_host',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_host = channel.unary_unary(
                '/Kconfig/delete_host',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_container = channel.unary_unary(
                '/Kconfig/delete_container',
                request_serializer=kcli__pb2.container.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_lb = channel.unary_unary(
                '/Kconfig/delete_lb',
                request_serializer=kcli__pb2.lb.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_kube = channel.unary_unary(
                '/Kconfig/delete_kube',
                request_serializer=kcli__pb2.kube.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_plan = channel.unary_unary(
                '/Kconfig/delete_plan',
                request_serializer=kcli__pb2.plan.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_profile = channel.unary_unary(
                '/Kconfig/delete_profile',
                request_serializer=kcli__pb2.profile.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.delete_repo = channel.unary_unary(
                '/Kconfig/delete_repo',
                request_serializer=kcli__pb2.repo.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.list_containers = channel.unary_unary(
                '/Kconfig/list_containers',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.containerslist.FromString,
                )
        self.list_container_images = channel.unary_unary(
                '/Kconfig/list_container_images',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.imageslist.FromString,
                )
        self.list_hosts = channel.unary_unary(
                '/Kconfig/list_hosts',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.clientslist.FromString,
                )
        self.list_keywords = channel.unary_unary(
                '/Kconfig/list_keywords',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.keywordslist.FromString,
                )
        self.list_kubes = channel.unary_unary(
                '/Kconfig/list_kubes',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.kubeslist.FromString,
                )
        self.list_lbs = channel.unary_unary(
                '/Kconfig/list_lbs',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.lbslist.FromString,
                )
        self.list_plans = channel.unary_unary(
                '/Kconfig/list_plans',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.planslist.FromString,
                )
        self.list_profiles = channel.unary_unary(
                '/Kconfig/list_profiles',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.profileslist.FromString,
                )
        self.list_products = channel.unary_unary(
                '/Kconfig/list_products',
                request_serializer=kcli__pb2.product.SerializeToString,
                response_deserializer=kcli__pb2.productslist.FromString,
                )
        self.list_repos = channel.unary_unary(
                '/Kconfig/list_repos',
                request_serializer=kcli__pb2.empty.SerializeToString,
                response_deserializer=kcli__pb2.reposlist.FromString,
                )
        self.restart_container = channel.unary_unary(
                '/Kconfig/restart_container',
                request_serializer=kcli__pb2.container.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.start_container = channel.unary_unary(
                '/Kconfig/start_container',
                request_serializer=kcli__pb2.container.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.stop_container = channel.unary_unary(
                '/Kconfig/stop_container',
                request_serializer=kcli__pb2.container.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.autostart_plan = channel.unary_unary(
                '/Kconfig/autostart_plan',
                request_serializer=kcli__pb2.plan.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.noautostart_plan = channel.unary_unary(
                '/Kconfig/noautostart_plan',
                request_serializer=kcli__pb2.plan.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.start_plan = channel.unary_unary(
                '/Kconfig/start_plan',
                request_serializer=kcli__pb2.plan.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.stop_plan = channel.unary_unary(
                '/Kconfig/stop_plan',
                request_serializer=kcli__pb2.plan.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )
        self.switch_host = channel.unary_unary(
                '/Kconfig/switch_host',
                request_serializer=kcli__pb2.client.SerializeToString,
                response_deserializer=kcli__pb2.result.FromString,
                )


class KconfigServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_vm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_config(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_version(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_host(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_host(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_container(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_lb(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_kube(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_profile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_repo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_containers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_container_images(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_hosts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_keywords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_kubes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_lbs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_plans(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_profiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_products(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_repos(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def restart_container(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_container(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_container(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def autostart_plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def noautostart_plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def start_plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stop_plan(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def switch_host(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KconfigServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_vm': grpc.unary_unary_rpc_method_handler(
                    servicer.create_vm,
                    request_deserializer=kcli__pb2.vmprofile.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'get_config': grpc.unary_unary_rpc_method_handler(
                    servicer.get_config,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.config.SerializeToString,
            ),
            'get_version': grpc.unary_unary_rpc_method_handler(
                    servicer.get_version,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.version.SerializeToString,
            ),
            'create_host': grpc.unary_unary_rpc_method_handler(
                    servicer.create_host,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_host': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_host,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_container': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_container,
                    request_deserializer=kcli__pb2.container.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_lb': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_lb,
                    request_deserializer=kcli__pb2.lb.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_kube': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_kube,
                    request_deserializer=kcli__pb2.kube.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_plan': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_plan,
                    request_deserializer=kcli__pb2.plan.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_profile': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_profile,
                    request_deserializer=kcli__pb2.profile.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'delete_repo': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_repo,
                    request_deserializer=kcli__pb2.repo.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'list_containers': grpc.unary_unary_rpc_method_handler(
                    servicer.list_containers,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.containerslist.SerializeToString,
            ),
            'list_container_images': grpc.unary_unary_rpc_method_handler(
                    servicer.list_container_images,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.imageslist.SerializeToString,
            ),
            'list_hosts': grpc.unary_unary_rpc_method_handler(
                    servicer.list_hosts,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.clientslist.SerializeToString,
            ),
            'list_keywords': grpc.unary_unary_rpc_method_handler(
                    servicer.list_keywords,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.keywordslist.SerializeToString,
            ),
            'list_kubes': grpc.unary_unary_rpc_method_handler(
                    servicer.list_kubes,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.kubeslist.SerializeToString,
            ),
            'list_lbs': grpc.unary_unary_rpc_method_handler(
                    servicer.list_lbs,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.lbslist.SerializeToString,
            ),
            'list_plans': grpc.unary_unary_rpc_method_handler(
                    servicer.list_plans,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.planslist.SerializeToString,
            ),
            'list_profiles': grpc.unary_unary_rpc_method_handler(
                    servicer.list_profiles,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.profileslist.SerializeToString,
            ),
            'list_products': grpc.unary_unary_rpc_method_handler(
                    servicer.list_products,
                    request_deserializer=kcli__pb2.product.FromString,
                    response_serializer=kcli__pb2.productslist.SerializeToString,
            ),
            'list_repos': grpc.unary_unary_rpc_method_handler(
                    servicer.list_repos,
                    request_deserializer=kcli__pb2.empty.FromString,
                    response_serializer=kcli__pb2.reposlist.SerializeToString,
            ),
            'restart_container': grpc.unary_unary_rpc_method_handler(
                    servicer.restart_container,
                    request_deserializer=kcli__pb2.container.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'start_container': grpc.unary_unary_rpc_method_handler(
                    servicer.start_container,
                    request_deserializer=kcli__pb2.container.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'stop_container': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_container,
                    request_deserializer=kcli__pb2.container.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'autostart_plan': grpc.unary_unary_rpc_method_handler(
                    servicer.autostart_plan,
                    request_deserializer=kcli__pb2.plan.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'noautostart_plan': grpc.unary_unary_rpc_method_handler(
                    servicer.noautostart_plan,
                    request_deserializer=kcli__pb2.plan.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'start_plan': grpc.unary_unary_rpc_method_handler(
                    servicer.start_plan,
                    request_deserializer=kcli__pb2.plan.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'stop_plan': grpc.unary_unary_rpc_method_handler(
                    servicer.stop_plan,
                    request_deserializer=kcli__pb2.plan.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
            'switch_host': grpc.unary_unary_rpc_method_handler(
                    servicer.switch_host,
                    request_deserializer=kcli__pb2.client.FromString,
                    response_serializer=kcli__pb2.result.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Kconfig', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Kconfig(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_vm(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/create_vm',
            kcli__pb2.vmprofile.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_config(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/get_config',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.config.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_version(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/get_version',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.version.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/create_host',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_host',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_container(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_container',
            kcli__pb2.container.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_lb(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_lb',
            kcli__pb2.lb.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_kube(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_kube',
            kcli__pb2.kube.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_plan',
            kcli__pb2.plan.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_profile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_profile',
            kcli__pb2.profile.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_repo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/delete_repo',
            kcli__pb2.repo.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_containers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_containers',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.containerslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_container_images(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_container_images',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.imageslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_hosts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_hosts',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.clientslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_keywords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_keywords',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.keywordslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_kubes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_kubes',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.kubeslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_lbs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_lbs',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.lbslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_plans(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_plans',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.planslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_profiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_profiles',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.profileslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_products(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_products',
            kcli__pb2.product.SerializeToString,
            kcli__pb2.productslist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_repos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/list_repos',
            kcli__pb2.empty.SerializeToString,
            kcli__pb2.reposlist.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def restart_container(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/restart_container',
            kcli__pb2.container.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_container(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/start_container',
            kcli__pb2.container.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_container(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/stop_container',
            kcli__pb2.container.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def autostart_plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/autostart_plan',
            kcli__pb2.plan.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def noautostart_plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/noautostart_plan',
            kcli__pb2.plan.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def start_plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/start_plan',
            kcli__pb2.plan.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stop_plan(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/stop_plan',
            kcli__pb2.plan.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def switch_host(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Kconfig/switch_host',
            kcli__pb2.client.SerializeToString,
            kcli__pb2.result.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
