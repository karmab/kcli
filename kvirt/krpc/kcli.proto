syntax = "proto3";
//import "google/protobuf/empty.proto";
//import "google/protobuf/any.proto";


message empty {}

message version {
    string version = 1 ; 
    string git_version = 2 ; 
}
message client {
 string client = 1 ; 
 string type = 2 ;
 bool current = 3 ; 
 string name = 4 ; 
 string access_key_id = 5 ; 
 string access_key_secret = 6 ;
 string region = 7 ; 
 string keypair = 8 ; 
 string host = 9 ;
 string port = 10 ; 
 string user = 11  ;
 string protocol = 12 ; 
 string url = 13 ; 
 string pool = 14 ; 
 string datacenter = 15 ; 
 string ca_file = 16 ; 
 string cluster = 17 ; 
 string org = 18 ; 
 string password = 19 ; 
 string credentials = 20 ;
 string project = 21 ; 
 string zone = 22 ; 
 string domain = 23 ; 
 string auth_url = 24 ; 
 string token = 25 ; 
 bool multus = 26 ; 
 bool cdi = 27 ;  
 bool enabled = 28 ;  
}

message clientslist {
 repeated client clients = 1 ;
}

message vm{
    string name = 1 ;
    bool debug = 2 ;
    bool snapshots = 3 ;
    string user = 4 ; 
    string l = 5 ; 
    string r = 6 ;
    bool X = 7 ; 
    bool Y = 8 ; 
    string D = 9 ; 
    string cmd = 10 ; 
}

message snapshot{
 string snapshot = 1 ; 
 bool current = 2 ;
}

message netinfo{
 string device = 1 ; 
 string mac = 2 ; 
 string net = 3 ; 
 string type = 4 ; 
}

message diskinfo{
 string device = 1 ; 
 string format = 2 ; 
 string path = 3 ; 
 int32 size = 4 ; 
 string type = 5 ; 
}

message vminfo{
    string name = 1 ;
    string image = 2 ;
    int32 cpus = 3 ;
    int32 memory = 4 ;
    string plan = 5 ;
    string profile = 6 ;
    string status = 7 ;
    string ip = 8 ;
    repeated netinfo nets = 9 ;
    repeated diskinfo disks = 10 ;
    string creationdate = 11 ;
    string user = 12 ;
    bool autostart = 13 ;
    string debug = 14 ; 
    repeated snapshot snapshots = 15 ;
    string kube = 16 ; 
    string kubetype = 17 ; 
    string instanceid = 18 ;
    string host = 19 ; 
    string private_ip = 20 ;
    string az = 21 ; 
    string flavor = 22 ; 
    string tags = 23 ; 
    string nodeport = 24 ; 
    string namespace = 25 ; 
    string loadbalancer = 26 ; 
    string error = 27 ; 
    string owner = 28 ;
    string id = 29 ;
    string project = 30 ;
    string domain = 31 ;
    string iso = 32 ;
    string loadbalancerip = 33 ;
    repeated string ips = 34 ;
}

message vmlist{
    repeated vminfo vms = 1 ;
}

message result{
    string result = 1 ;
    string reason = 2 ;
    repeated string deletedvm = 3 ;
    string vm = 4 ; 
}

message profile{
    string name = 1 ;
    string flavor = 2 ;
    string pool = 3 ; 
    string disks = 4 ; 
    string image = 5 ; 
    string nets = 6 ; 
    bool cloudinit = 7 ; 
    bool nested = 8 ; 
    bool reservedns = 9 ; 
    bool reservehost = 10 ; 
}

message profileslist{
    repeated profile profiles = 1 ;
}

message isoslist{
    repeated string isos = 1 ;
}

message image{
    string image = 1 ; 
}

message imageslist{
    repeated string images = 1 ;
}

message disk {
    string disk = 1 ; 
    string pool = 2 ; 
    string path = 3 ; 
}

message diskslist{
    repeated disk disks = 1 ;
}


message plan {
    string plan = 1 ; 
    string vms = 2 ; 
}

message planslist {
    repeated plan plans = 1 ; 
}

message keyword {
    string keyword = 1 ; 
    string value = 2 ; 
}

message keywordslist {
    repeated keyword keywords = 1 ; 
}

message pool {
    string pool = 1 ; 
    string path = 2 ; 
    bool full = 3 ; 
    string type = 4 ; 
    bool thinpool = 5 ; 
}

message poolslist {
    repeated pool pools  = 1 ;
}

message network {
    string network = 1 ; 
    string type = 2 ; 
    string cidr = 3 ; 
    string dhcp = 4 ; 
    string domain = 5 ; 
    string mode = 6 ; 
    string plan = 7 ; 
    string ip = 8 ; 
    bool nat = 9 ; 
    string overrides = 10 ; 
}

message networkslist {
    repeated network networks = 1 ;
}

message subnet {
    string subnet = 1 ; 
    string az = 2 ;
    string cidr = 3 ; 
    string network = 4 ; 
}

message subnetslist {
    repeated subnet subnets = 1 ;
}

message kube {
    string kube = 1 ;
    string type = 2 ; 
    string vms = 3 ;
}

message kubeslist {
    repeated kube kubes = 1 ;
}

message lb {
    string lb = 1 ;
    string ip = 2 ; 
    string protocol = 3 ;
    string ports = 4 ;
    string target = 5 ;
}

message lbslist {
    repeated lb lbs = 1 ;
}

message flavor {
    string flavor = 1 ;
    int32 numcpus = 2 ; 
    int32 memory = 3 ; 
}

message flavorslist {
    repeated flavor flavors = 1 ; 
}

message repo {
    string repo = 1 ; 
    string url = 2 ; 
}

message reposlist {
    repeated repo repos = 1 ; 
}

message product {
    string product = 1 ;
    string repo = 2 ; 
    string group = 3 ;
    string description = 4 ; 
    string numvms = 5 ; 
    string memory = 6 ; 
}

message productslist {
    repeated product products = 1 ; 
}

message config {
    string client = 1 ; 
    repeated string extraclients = 2 ; 
}

message container {
    string container = 1 ;
    string status = 2 ;
    string image = 3 ;
    string plan = 4 ;
    string command = 5 ;
    string ports = 6 ;
    string deploy = 7 ;
}

message containerslist {
    repeated container containers = 1 ; 
}

message sshcmd {
    string sshcmd = 1 ; 
}
message cmd {
    string cmd = 1 ; 
}

message scpdetails {
    string name = 1 ; 
    string source = 2 ;
    string destination = 3 ;
    string user = 4 ;
    bool recursive = 5 ;
    bool download = 6 ;
}

message vmfile {
    string origin = 1 ;
    string content = 3 ; 
}

message vmprofile {
    string name = 1 ; 
    string profile = 2 ;
    string image = 3 ;
    string customprofile = 4 ;
    string overrides = 5 ; 
    bool wait = 6 ;
    repeated vmfile vmfiles = 7 ;
    string ignitionfile = 8 ;
}

service Kcli {
    rpc console(vm) returns (cmd) {}
    rpc info(vm) returns (vminfo) {}
    rpc list(client) returns (vmlist) {}
    rpc list_disks(empty) returns (diskslist) {}
    rpc list_flavors(empty) returns (flavorslist) {}
    rpc list_images(empty) returns (imageslist) {}
    rpc list_networks(empty) returns (networkslist) {}
    rpc list_isos(empty) returns (isoslist) {}
    rpc list_pools(empty) returns (poolslist) {}
    rpc list_subnets(empty) returns (subnetslist) {}
    rpc restart(vm) returns (result) {}
    rpc serial_console(vm) returns (cmd) {}
    rpc ssh(vm) returns (sshcmd) {}
    rpc scp(scpdetails) returns (sshcmd) {}
    rpc start(vm) returns (result) {}
    rpc stop(vm) returns (result) {}
    rpc delete(vm) returns (result) {}
    rpc get_lastvm(client) returns (vm) {}
    rpc delete_image(image) returns (result) {}
    rpc create_network(network) returns (result) {}
    rpc delete_network(network) returns (result) {}
    rpc create_pool(pool) returns (result) {}
    rpc delete_pool(pool) returns (result) {}
}

service Kconfig {
    rpc create_vm(vmprofile) returns (result) {}
    rpc get_config(empty) returns (config) {}
    rpc get_version(empty) returns (version) {}
    rpc create_host(client) returns (result) {}
    rpc delete_host(client) returns (result) {}
    rpc delete_container(container) returns (result) {}
    rpc delete_lb(lb) returns (result) {}
    rpc delete_kube(kube) returns (result) {}
    rpc delete_plan(plan) returns (result) {}
    rpc delete_profile(profile) returns (result) {}
    rpc delete_repo(repo) returns (result) {}
    rpc list_containers(empty) returns (containerslist) {}
    rpc list_container_images(empty) returns (imageslist) {}
    rpc list_hosts(empty) returns (clientslist) {}
    rpc list_keywords(empty) returns (keywordslist) {}
    rpc list_kubes(empty) returns (kubeslist) {}
    rpc list_lbs(empty) returns (lbslist) {}
    rpc list_plans(empty) returns (planslist) {}
    rpc list_profiles(empty) returns (profileslist) {}
    rpc list_products(product) returns (productslist) {}
    rpc list_repos(empty) returns (reposlist) {}
    rpc restart_container(container) returns (result) {}
    rpc start_container(container) returns (result) {}
    rpc stop_container(container) returns (result) {}
    rpc autostart_plan(plan) returns (result) {}
    rpc noautostart_plan(plan) returns (result) {}
    rpc start_plan(plan) returns (result) {}
    rpc stop_plan(plan) returns (result) {}
    rpc switch_host(client) returns (result) {}
}
